---
{# change num_gpdb5_versions & num_gpdb6_versions in Makefile to download/test more Greenplum versions #}
{# number of backwards compatibility tasks that can run at once #}
{% if dev_pipeline == True or pr_pipeline == True %}
  {% set num_gpdb5_versions = 1 %}
  {% set num_gpdb6_versions = 1 %}
{% endif %}
{% set max_concurrent_bc_tasks = 3 %}
## ======================================================================
## GROUPS
## ======================================================================
{% if pr_pipeline != True %}
groups:
- name: All
  jobs:
  - Testing Gate for PXF-GP
{% set gp_ver = 5 %}
  - Build PXF-GP[[gp_ver]] on RHEL6
  - Test PXF-GP[[gp_ver]]-HDP2 on RHEL6
{% set gp_ver = None %}
{% for gp_ver in range(5, 7) %}
  - Build PXF-GP[[gp_ver]] on RHEL7
  - Test PXF-GP[[gp_ver]]-HDP2 on RHEL7
{% endfor %}
{% if build_deb == True %}
{% set gp_ver = 6 %}
  - Test PXF-GP[[gp_ver]]-HDP2 on Ubuntu18
  - Build PXF-GP[[gp_ver]] on Ubuntu18
{% set gp_ver = None %}
{% endif %}
{% if dev_pipeline != True %}
{% set gp_ver = 5 %}
  - Test PXF-GP[[gp_ver]] Backward Compatibility on RHEL6
{% set gp_ver = None %}
{% for gp_ver in range(5, 7) %}
  - Test PXF-GP[[gp_ver]] Backward Compatibility on RHEL7
{% endfor %}
{% set gp_ver = 6 %}
{% if build_deb == True %}
  - Test PXF-GP[[gp_ver]] Backward Compatibility on Ubuntu18
{% endif %}
  - Test PXF-GP[[gp_ver]]-HDP2-NO-IMPERS on RHEL7
  - Test PXF-GP[[gp_ver]]-MAPR on RHEL7
  - Test PXF-GP[[gp_ver]]-HDP3 on RHEL7
  - Test PXF-GP[[gp_ver]]-HDP3-SECURE AMBARI (MANUAL) on RHEL7
  - Test PXF-GP[[gp_ver]]-HDP2-JDK11 on RHEL7
  - Test PXF-GP[[gp_ver]]-CDH on RHEL7
  - Test PXF-GP[[gp_ver]]-S3 on RHEL7
  - Test PXF-GP[[gp_ver]]-S3-NO-IMPERS on RHEL7
  - Test PXF-GP[[gp_ver]]-ADL-NO-IMPERS on RHEL7
  - Test PXF-GP[[gp_ver]]-GS-NO-IMPERS on RHEL7
  - Test PXF-GP[[gp_ver]]-MINIO-NO-IMPERS on RHEL7
  - Test PXF-GP[[gp_ver]]-HDP2-SECURE-MULTI-IMPERS on RHEL7
  - Test PXF-GP[[gp_ver]]-HDP2-SECURE-MULTI-NO-IMPERS on RHEL7
{% set gp_ver = None %}
  - Compatibility Gate for PXF-GP
  - Promote PXF-GP5 and PXF-GP6 Artifacts
  - Publish PXF-GP5 and PXF-GP6 Artifacts to GP-RelEng
{% endif %}

{% set gp_ver = 5 %}
- name: GP[[gp_ver]] on RHEL6
  jobs:
  - Build PXF-GP[[gp_ver]] on RHEL6
  - Test PXF-GP[[gp_ver]]-HDP2 on RHEL6
{% set gp_ver = None %}
{% for gp_ver in range(5, 7) %}
- name: GP[[gp_ver]] on RHEL7
  jobs:
  - Build PXF-GP[[gp_ver]] on RHEL7
  - Test PXF-GP[[gp_ver]]-HDP2 on RHEL7
{% endfor %}
{% if build_deb == True %}
{% set gp_ver = 6 %}
- name: GP[[gp_ver]] on Ubuntu18
  jobs:
  - Test PXF-GP[[gp_ver]]-HDP2 on Ubuntu18
  - Build PXF-GP[[gp_ver]] on Ubuntu18
{% set gp_ver = None %}
{% endif %}
{% if dev_pipeline != True %}
{% set gp_ver = 6 %}
- name: PXF Tests - GP[[gp_ver]] on RHEL7
  jobs:
  - Test PXF-GP[[gp_ver]]-HDP2-NO-IMPERS on RHEL7
  - Test PXF-GP[[gp_ver]]-MAPR on RHEL7
  - Test PXF-GP[[gp_ver]]-HDP3 on RHEL7
  - Test PXF-GP[[gp_ver]]-HDP3-SECURE AMBARI (MANUAL) on RHEL7
  - Test PXF-GP[[gp_ver]]-HDP2-JDK11 on RHEL7
  - Test PXF-GP[[gp_ver]]-CDH on RHEL7
  - Test PXF-GP[[gp_ver]]-S3 on RHEL7
  - Test PXF-GP[[gp_ver]]-S3-NO-IMPERS on RHEL7
  - Test PXF-GP[[gp_ver]]-ADL-NO-IMPERS on RHEL7
  - Test PXF-GP[[gp_ver]]-GS-NO-IMPERS on RHEL7
  - Test PXF-GP[[gp_ver]]-MINIO-NO-IMPERS on RHEL7
  - Test PXF-GP[[gp_ver]]-HDP2-SECURE-MULTI-IMPERS on RHEL7
  - Test PXF-GP[[gp_ver]]-HDP2-SECURE-MULTI-NO-IMPERS on RHEL7
{% set gp_ver = None %}
- name: Backwards Compatibility
  jobs:
{% set gp_ver = 5 %}
  - Test PXF-GP[[gp_ver]] Backward Compatibility on RHEL6
{% set gp_ver = None %}
{% for gp_ver in range(5, 7) %}
  - Test PXF-GP[[gp_ver]] Backward Compatibility on RHEL7
{% endfor %}
{% if build_deb == True %}
{% set gp_ver = 6 %}
  - Test PXF-GP[[gp_ver]] Backward Compatibility on Ubuntu18
{% set gp_ver = None %}
{% endif %}
- name: Promote and Publish
  jobs:
  - Promote PXF-GP5 and PXF-GP6 Artifacts
  - Publish PXF-GP5 and PXF-GP6 Artifacts to GP-RelEng
{% endif %}
{% endif %}

## ======================================================================
## ANCHORS
## ======================================================================
anchors:
- &destroy_clusters
  do:
  - in_parallel:
    - task: Cleanup Dataproc 1
      config:
        run:
          path: pxf_src/concourse/scripts/cleanup_dataproc_cluster.bash
        inputs:
          - name: pxf_src
          - name: dataproc_env_files
        platform: linux
      image: ccp-7-image
      params:
        GOOGLE_CREDENTIALS: ((google-service-account-key))
        GOOGLE_PROJECT_ID: ((google-project-id))
        GOOGLE_ZONE: ((google-zone))
    - task: Cleanup Dataproc 2
      input_mapping:
        dataproc_env_files: dataproc_2_env_files
      config:
        run:
          path: pxf_src/concourse/scripts/cleanup_dataproc_cluster.bash
        inputs:
          - name: pxf_src
          - name: dataproc_env_files
        platform: linux
      image: ccp-7-image
      params:
        GOOGLE_CREDENTIALS: ((data-gpdb-ud-kerberos-google-service-account-key))
        GOOGLE_PROJECT_ID: ((data-gpdb-ud-kerberos-google-project-id))
        GOOGLE_ZONE: ((data-gpdb-ud-kerberos-google-zone))
    - put: terraform_gpdb
      resource: terraform
      params:
        action: destroy
        env_name_file: terraform_gpdb/name
        terraform_source: ccp_src/google/
      get_params:
        action: destroy

{% if slack_notification != False %}
- &slack_alert
  on_failure:
    put: slack-alert
    params:
      text: |
        <((ud-concourse-url))/builds/$BUILD_ID|$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME> went red :blob_slightly_frowning_face:
  on_success:
    put: slack-alert
    params:
      text: |
        <((ud-concourse-url))/builds/$BUILD_ID|$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME> went green! :smile:
{% endif %}

## ======================================================================
## RESOURCE TYPES
## ======================================================================
resource_types:

{% if dev_pipeline != True %}
- name: terraform
  type: registry-image
  source:
    repository: ljfranklin/terraform-resource
    tag: 0.11.14
{% endif %}

- name: gcs
  type: registry-image
  source:
    repository: frodenas/gcs-resource

{% if pr_pipeline == True %}
- name: pull-request
  type: docker-image
  source:
    repository: teliaoss/github-pr-resource
{% elif slack_notification != False %}
- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource
    tag: latest
{% endif %}

## ======================================================================
## RESOURCES
## ======================================================================
resources:

- name: pxf-build-dependencies
  type: gcs
  icon: google-drive
  source:
    bucket: data-gpdb-ud-pxf-build-resources
    json_key: ((pxf-storage-service-account-key))
    versioned_file: build-dependencies/pxf-build-dependencies.tar.gz

{% if pr_pipeline != True %}
{# we only use pg_regress for the PR pipeline #}
- name: pxf-automation-dependencies
  type: gcs
  icon: google-drive
  source:
    bucket: data-gpdb-ud-pxf-build-resources
    json_key: ((pxf-storage-service-account-key))
    versioned_file: automation-dependencies/pxf-automation-dependencies.tar.gz
{% endif %}

- name: singlecluster-hdp2
  type: gcs
  icon: google-drive
  source:
    bucket: data-gpdb-ud-pxf-build-resources
    json_key: ((pxf-storage-service-account-key))
    versioned_file: singlecluster/HDP2/singlecluster-HDP2.tar.gz

{% if dev_pipeline != True and pr_pipeline != True %}
- name: singlecluster-cdh
  type: gcs
  icon: google-drive
  source:
    bucket: data-gpdb-ud-pxf-build-resources
    json_key: ((pxf-storage-service-account-key))
    versioned_file: singlecluster/CDH/singlecluster-CDH.tar.gz

- name: singlecluster-hdp3
  type: gcs
  icon: google-drive
  source:
    bucket: data-gpdb-ud-pxf-build-resources
    json_key: ((pxf-storage-service-account-key))
    versioned_file: singlecluster/HDP3/singlecluster-HDP3.tar.gz
{% endif %}

## ---------- Github Repos ----------
{% if pr_pipeline == True %}
- name: pxf_src
  type: pull-request
  source:
    repository: greenplum-db/pxf
    access_token: {{pxf-bot-access-token}}
{% else %}
- name: pxf_src
  type: git
  icon: git
  source:
    branch: ((pxf-git-branch))
    uri: ((pxf-git-remote))
{% endif %}

{% if dev_pipeline != True and pr_pipeline != True %}
- name: ccp_src
  type: git
  source:
    branch: ((ccp-git-branch))
    private_key: ((ccp-git-key))
    uri: ((ccp-git-remote))
{% endif %}

## ---------- Docker Images ----------
{% set gp_ver = 5 %}
- name: gpdb[[gp_ver]]-pxf-dev-centos6-image
  type: registry-image
  icon: docker
  source:
    repository: gcr.io/data-gpdb-ud/gpdb-pxf-dev/gpdb[[gp_ver]]-centos6-test-pxf
    tag: latest
    username: _json_key
    password: ((pxf-cloudbuild-service-account-key))
{% set gp_ver = None %}

{% for gp_ver in range(5, 7) %}
- name: gpdb[[gp_ver]]-pxf-dev-centos7-image
  type: registry-image
  icon: docker
  source:
    repository: gcr.io/data-gpdb-ud/gpdb-pxf-dev/gpdb[[gp_ver]]-centos7-test-pxf
    tag: latest
    username: _json_key
    password: ((pxf-cloudbuild-service-account-key))
{% endfor %} {# gp5 and gp6 #}

{% set gp_ver = 6 %}
{% if build_deb == True %}
- name: gpdb[[gp_ver]]-pxf-dev-ubuntu18-image
  type: registry-image
  icon: docker
  source:
    repository: gcr.io/data-gpdb-ud/gpdb-pxf-dev/gpdb[[gp_ver]]-ubuntu18.04-test-pxf
    tag: latest
    username: _json_key
    password: ((pxf-cloudbuild-service-account-key))
{% endif %}

{% if dev_pipeline != True and pr_pipeline != True %}
- name: gpdb[[gp_ver]]-pxf-dev-centos7-mapr-server-image
  type: registry-image
  icon: docker
  source:
    repository: gcr.io/data-gpdb-ud/gpdb-pxf-dev/gpdb[[gp_ver]]-centos7-test-pxf-mapr
    tag: latest
    username: _json_key
    password: ((pxf-cloudbuild-service-account-key))
{% endif %}
{% set gp_ver = None %}

{% if dev_pipeline != True and pr_pipeline != True %}
- name: ccp-7-image
  type: registry-image
  icon: docker
  source:
    repository: pivotaldata/ccp
    tag: 7

- name: google-cloud-sdk-slim-image
  type: registry-image
  icon: docker
  source:
    repository: google/cloud-sdk
    tag: slim
{% endif %}

{% if pr_pipeline != True and slack_notification != False %}
- name: slack-alert
  type: slack-notification
  source:
  {% if dev_pipeline == True %}
    url: (([[user]]-slack-integration-webhook))
  {% else %}
    url: ((ud-dev-slack-integration-webhook))
  {% endif %}
{% endif %}

## ---------- Product Packages ----------
{% set gp_ver = 5 %}
{% for i in range(num_gpdb5_versions) %}
- name: gpdb[[gp_ver]]_rhel6_rpm_latest-[[i]]
  type: gcs
  icon: google-drive
  source:
    bucket: data-gpdb-ud-pivnet-artifacts
    json_key: ((pxf-storage-service-account-key))
    regexp: latest-[[i]]_gpdb[[gp_ver]]/greenplum-db-(.*)-rhel6-x86_64.rpm

- name: gpdb[[gp_ver]]_rhel7_rpm_latest-[[i]]
  type: gcs
  icon: google-drive
  source:
    bucket: data-gpdb-ud-pivnet-artifacts
    json_key: ((pxf-storage-service-account-key))
    regexp: latest-[[i]]_gpdb[[gp_ver]]/greenplum-db-(.*)-rhel7-x86_64.rpm
{% endfor %} {# range(num_gpdb5_versions) #}
{% set gp_ver = None %}

{% set gp_ver = 6 %}
{% for i in range(num_gpdb6_versions) %}
- name: gpdb[[gp_ver]]_rhel7_rpm_latest-[[i]]
  type: gcs
  icon: google-drive
  source:
    bucket: data-gpdb-ud-pivnet-artifacts
    json_key: ((pxf-storage-service-account-key))
    regexp: latest-[[i]]_gpdb[[gp_ver]]/greenplum-db-(.*)-rhel7-x86_64.rpm

{% if build_deb == True %}
- name: gpdb[[gp_ver]]_ubuntu18_deb_latest-[[i]]
  type: gcs
  icon: google-drive
  source:
    bucket: data-gpdb-ud-pivnet-artifacts
    json_key: ((pxf-storage-service-account-key))
    regexp: latest-[[i]]_gpdb[[gp_ver]]/greenplum-db-(.*)-ubuntu18.04-amd64.deb
{% endif %}
{% endfor %} {# range(num_gpdb6_versions) #}
{% set gp_ver = None %}

## ---------- PXF Build Artifacts ----------
{% if pr_pipeline != True %}
  {% set gp_ver = 5 %}
- name: pxf_gp[[gp_ver]]_tarball_rhel6
  type: gcs
  icon: google-drive
  source:
    bucket: data-gpdb-ud-pxf-build
    json_key: ((pxf-storage-service-account-key))
  {% if dev_pipeline == True %}
    versioned_file: dev/[[user]]-[[branch]]/snapshots/pxf-gp[[gp_ver]].el6.tar.gz
  {% else %}
    versioned_file: prod/snapshots/pxf-gp[[gp_ver]].el6.tar.gz
  {% endif %}
  {% set gp_ver = None %}

  {% for gp_ver in range(5, 7) %}
- name: pxf_gp[[gp_ver]]_tarball_rhel7
  type: gcs
  icon: google-drive
  source:
    bucket: data-gpdb-ud-pxf-build
    json_key: ((pxf-storage-service-account-key))
  {% if dev_pipeline == True %}
    versioned_file: dev/[[user]]-[[branch]]/snapshots/pxf-gp[[gp_ver]].el7.tar.gz
  {% else %}
    versioned_file: prod/snapshots/pxf-gp[[gp_ver]].el7.tar.gz
  {% endif %}
  {% endfor %}

  {% if build_deb == True %}
  {% set gp_ver = 6 %}
- name: pxf_gp[[gp_ver]]_tarball_ubuntu18
  type: gcs
  icon: google-drive
  source:
    bucket: data-gpdb-ud-pxf-build
    json_key: ((pxf-storage-service-account-key))
  {% if dev_pipeline == True %}
    versioned_file: dev/[[user]]-[[branch]]/snapshots/pxf-gp[[gp_ver]].ubuntu18.04.tar.gz
  {% else %}
    versioned_file: prod/snapshots/pxf-gp[[gp_ver]].ubuntu18.04.tar.gz
  {% endif %}
  {% set gp_ver = None %}
  {% endif %}
{% endif %} {# if pr_pipeline != True #}

{% if dev_pipeline != True and pr_pipeline != True %}
- name: pxf_open_source_license_file
  type: gcs
  icon: google-drive
  source:
    bucket: data-gpdb-ud-pxf-releases
    json_key: ((pxf-storage-service-account-key))
    regexp: prod/OSL/pxf-(.*).txt
{% endif %}

{% if dev_pipeline != True and pr_pipeline != True %}
## ---------- Auxiliary Resources ----------
- name: terraform
  type: terraform
  source:
    env:
      AWS_ACCESS_KEY_ID: ((tf-machine-access-key-id))
      AWS_SECRET_ACCESS_KEY: ((tf-machine-secret-access-key))
      GOOGLE_CREDENTIALS: ((google-service-account-key))
    vars:
      project_id: ((google-project-id))
    storage:
      access_key_id: ((tf-machine-access-key-id))
      secret_access_key: ((tf-machine-secret-access-key))
      region_name: ((aws-region))
      bucket: ((tf-bucket-name))
      bucket_path: ((tf-bucket-path))
{% endif %}

## ======================================================================
## JOBS
## ======================================================================
jobs:

## ---------- Centos 6 Swimlane ----------
{% set gp_ver = 5 %}
{% if pr_pipeline == True %}
- name: Build and Test PXF-GP[[gp_ver]] on RHEL6
  public: true
  on_failure:
    put: pxf_src
    params:
      path: pxf_src
      status: failure
      context: Build and Test PXF-GP[[gp_ver]] on RHEL6
  on_success:
    put: pxf_src
    params:
      path: pxf_src
      status: success
      context: Build and Test PXF-GP[[gp_ver]] on RHEL6
{% else %}
- name: Build PXF-GP[[gp_ver]] on RHEL6
{% endif %}
  plan:
  - in_parallel:
    - get: pxf_src
      trigger: true
    - get: gpdb_package
      resource: gpdb[[gp_ver]]_rhel6_rpm_latest-0
    - get: gpdb[[gp_ver]]-pxf-dev-centos6-image
    - get: pxf-build-dependencies
{% if pr_pipeline == True %}
    - get: singlecluster
      resource: singlecluster-hdp2
{% endif %}
  - task: Build PXF on RHEL6
    image: gpdb[[gp_ver]]-pxf-dev-centos6-image
    file: pxf_src/concourse/tasks/build.yml
    params:
      LICENSE: ((pxf-rpm-license))
      TARGET_OS: rhel6
      VENDOR: ((pxf-rpm-vendor))
{% if pr_pipeline == True %}
  - task: Test Against Greenplum Latest RHEL6
    image: gpdb[[gp_ver]]-pxf-dev-centos6-image
    config:
      platform: linux
      inputs:
      - name: gpdb_package
      - name: pxf_src
      - name: dist
      - name: singlecluster
      params:
        GPDB_PKG_DIR: gpdb_package
        GP_VER: [[gp_ver]]
        GROUP: HdfsSmokeTest,WritableSmokeTest
        HADOOP_CLIENT: hdp
        IMPERSONATION: true
        PGPORT: 5432
        PG_REGRESS: true
        PXF_PKG_DIR: dist
      run:
        path: pxf_src/concourse/scripts/test.bash
{% else %}
  - put: pxf_gp[[gp_ver]]_tarball_rhel6
    params:
      file: dist/pxf-gp[[gp_ver]]-*.el6.tar.gz

- name: Test PXF-GP[[gp_ver]]-HDP2 on RHEL6
  plan:
  - in_parallel:
    - get: pxf_src
      passed: [Build PXF-GP[[gp_ver]] on RHEL6]
      trigger: true
    - get: pxf_tarball
      resource: pxf_gp[[gp_ver]]_tarball_rhel6
      passed: [Build PXF-GP[[gp_ver]] on RHEL6]
    - get: gpdb_package
      resource: gpdb[[gp_ver]]_rhel6_rpm_latest-0
      passed: [Build PXF-GP[[gp_ver]] on RHEL6]
    - get: gpdb[[gp_ver]]-pxf-dev-centos6-image
      passed: [Build PXF-GP[[gp_ver]] on RHEL6]
    - get: pxf-automation-dependencies
    - get: singlecluster
      resource: singlecluster-hdp2
  - task: Test PXF-GP[[gp_ver]]-HDP2 on RHEL6
    file: pxf_src/concourse/tasks/test.yml
    image: gpdb[[gp_ver]]-pxf-dev-centos6-image
    params:
      ACCESS_KEY_ID: ((tf-machine-access-key-id))
      GP_VER: [[gp_ver]]
      GROUP: gpdb,proxy,profile
      SECRET_ACCESS_KEY: ((tf-machine-secret-access-key))
      TARGET_OS: centos
      TARGET_OS_VERSION: 6
#      TEST_ENV: ((test-env))
{% endif %} {# if pr_pipeline == True #}
{% set gp_ver = None %}

## ---------- Centos 7 Swimlane ----------
{% for gp_ver in range(5, 7) %}
{% if pr_pipeline == True %}
- name: Build and Test PXF-GP[[gp_ver]] on RHEL7
  public: true
  on_failure:
    put: pxf_src
    params:
      path: pxf_src
      status: failure
      context: Build and Test PXF-GP[[gp_ver]] on RHEL7
  on_success:
    put: pxf_src
    params:
      path: pxf_src
      status: success
      context: Build and Test PXF-GP[[gp_ver]] on RHEL7
{% else %}
- name: Build PXF-GP[[gp_ver]] on RHEL7
{% endif %}
  plan:
  - in_parallel:
    - get: pxf_src
      trigger: true
    - get: gpdb_package
      resource: gpdb[[gp_ver]]_rhel7_rpm_latest-0
    - get: gpdb[[gp_ver]]-pxf-dev-centos7-image
    - get: pxf-build-dependencies
{% if pr_pipeline == True %}
    - get: singlecluster
      resource: singlecluster-hdp2
{% endif %}
  - task: Build PXF-GP[[gp_ver]] on RHEL7
    image: gpdb[[gp_ver]]-pxf-dev-centos7-image
    file: pxf_src/concourse/tasks/build.yml
    params:
      LICENSE: ((pxf-rpm-license))
      TARGET_OS: rhel7
      VENDOR: ((pxf-rpm-vendor))
{% if pr_pipeline == True %}
  - task: Test Against Greenplum Latest RHEL7
    image: gpdb[[gp_ver]]-pxf-dev-centos7-image
    config:
      platform: linux
      inputs:
      - name: gpdb_package
      - name: pxf_src
      - name: dist
      - name: singlecluster
      params:
        GPDB_PKG_DIR: gpdb_package
        GP_VER: [[gp_ver]]
        GROUP: HdfsSmokeTest,WritableSmokeTest
        HADOOP_CLIENT: hdp
        IMPERSONATION: true
        PGPORT: 5432
        PG_REGRESS: true
        PXF_PKG_DIR: dist
      run:
        path: pxf_src/concourse/scripts/test.bash
{% else %}
  - put: pxf_gp[[gp_ver]]_tarball_rhel7
    params:
      file: dist/pxf-gp[[gp_ver]]-*.el7.tar.gz

- name: Test PXF-GP[[gp_ver]]-HDP2 on RHEL7
  plan:
  - in_parallel:
    - get: pxf_src
      passed: [Build PXF-GP[[gp_ver]] on RHEL7]
      trigger: true
    - get: pxf_tarball
      resource: pxf_gp[[gp_ver]]_tarball_rhel7
      passed: [Build PXF-GP[[gp_ver]] on RHEL7]
    - get: gpdb_package
      resource: gpdb[[gp_ver]]_rhel7_rpm_latest-0
      passed: [Build PXF-GP[[gp_ver]] on RHEL7]
    - get: gpdb[[gp_ver]]-pxf-dev-centos7-image
      passed: [Build PXF-GP[[gp_ver]] on RHEL7]
    - get: pxf-automation-dependencies
    - get: singlecluster
      resource: singlecluster-hdp2
  - task: Test PXF-GP[[gp_ver]]-HDP2 on RHEL7
    file: pxf_src/concourse/tasks/test.yml
    image: gpdb[[gp_ver]]-pxf-dev-centos7-image
    params:
      ACCESS_KEY_ID: ((tf-machine-access-key-id))
      GP_VER: [[gp_ver]]
      GROUP: gpdb,proxy,profile
      SECRET_ACCESS_KEY: ((tf-machine-secret-access-key))
      TARGET_OS: centos
      TARGET_OS_VERSION: 7
#      TEST_ENV: ((test-env))
{% endif %} # if pr_pipeline == True
{% endfor %} {# gp_ver 5 and 6 #}

## ---------- Ubuntu 18 Swimlane ----------
{% if build_deb == True %}
{% set gp_ver = 6 %}
  {% if pr_pipeline == True %}
- name: Build and Test PXF-GP[[gp_ver]] on Ubuntu18
  public: true
  on_failure:
    put: pxf_src
    params:
      path: pxf_src
      status: failure
      context: Build and Test PXF-GP[[gp_ver]] on Ubuntu18
  on_success:
    put: pxf_src
    params:
      path: pxf_src
      status: success
      context: Build and Test PXF-GP[[gp_ver]] on Ubuntu18
  {% else %}
- name: Build PXF-GP[[gp_ver]] on Ubuntu18
  {% endif %}
  plan:
  - in_parallel:
    - get: pxf_src
      trigger: true
    - get: gpdb_package
      resource: gpdb[[gp_ver]]_ubuntu18_deb_latest-0
    - get: gpdb[[gp_ver]]-pxf-dev-ubuntu18-image
    - get: pxf-build-dependencies
{% if pr_pipeline == True %}
    - get: singlecluster
      resource: singlecluster-hdp2
{% endif %}
  - task: Build PXF-GP[[gp_ver]] on Ubuntu18
    image: gpdb[[gp_ver]]-pxf-dev-ubuntu18-image
    file: pxf_src/concourse/tasks/build.yml
    params:
      LICENSE: ((pxf-rpm-license))
      TARGET_OS: ubuntu18.04
      VENDOR: ((pxf-rpm-vendor))
  {% if pr_pipeline == True %}
  - task: Test Against Greenplum Latest Ubuntu18
    image: gpdb[[gp_ver]]-pxf-dev-ubuntu18-image
    config:
      platform: linux
      inputs:
      - name: gpdb_package
      - name: pxf_src
      - name: dist
      - name: singlecluster
      params:
        GPDB_PKG_DIR: gpdb_package
        GP_VER: [[gp_ver]]
        GROUP: HdfsSmokeTest,WritableSmokeTest
        HADOOP_CLIENT: hdp
        IMPERSONATION: true
        PGPORT: 5432
        PG_REGRESS: true
        PXF_PKG_DIR: dist
      run:
        path: pxf_src/concourse/scripts/test.bash
  {% else %}
  - put: pxf_gp[[gp_ver]]_tarball_ubuntu18
    params:
      file: dist/pxf-gp[[gp_ver]]-*.ubuntu18.04.tar.gz

- name: Test PXF-GP[[gp_ver]]-HDP2 on Ubuntu18
  plan:
  - in_parallel:
    - get: pxf_src
      passed: [Build PXF-GP[[gp_ver]] on Ubuntu18]
      trigger: true
    - get: pxf_tarball
      resource: pxf_gp[[gp_ver]]_tarball_ubuntu18
      passed: [Build PXF-GP[[gp_ver]] on Ubuntu18]
    - get: gpdb_package
      resource: gpdb[[gp_ver]]_ubuntu18_deb_latest-0
      passed: [Build PXF-GP[[gp_ver]] on Ubuntu18]
    - get: gpdb[[gp_ver]]-pxf-dev-ubuntu18-image
      passed: [Build PXF-GP[[gp_ver]] on Ubuntu18]
    - get: pxf-automation-dependencies
    - get: singlecluster
      resource: singlecluster-hdp2
  - task: Test PXF-GP[[gp_ver]]-HDP2 on Ubuntu18
    file: pxf_src/concourse/tasks/test.yml
    image: gpdb[[gp_ver]]-pxf-dev-ubuntu18-image
    params:
      ACCESS_KEY_ID: ((tf-machine-access-key-id))
      GP_VER: [[gp_ver]]
      GROUP: gpdb,proxy,profile
      SECRET_ACCESS_KEY: ((tf-machine-secret-access-key))
      TARGET_OS: ubuntu
      TARGET_OS_VERSION: 18
#      TEST_ENV: ((test-env))
  {% endif %} {# if pr_pipeline == True #}
{% set gp_ver = None %}
{% endif %} {# if build_deb == True #}

{% if pr_pipeline != True %}
## ---------- Testing Gate ----------
- name: Testing Gate for PXF-GP
  plan:
  - in_parallel:
{# pxf source passed all testing jobs #}
    - get: pxf_src
      trigger: true
      passed:
{% set gp_ver = 5 %}
      - Test PXF-GP[[gp_ver]]-HDP2 on RHEL6
{% for gp_ver in range(5, 7) %}
      - Test PXF-GP[[gp_ver]]-HDP2 on RHEL7
{% endfor %}
{% set gp_ver = None %}
{% set gp_ver = 6 %}
{% if build_deb == True %}
      - Test PXF-GP[[gp_ver]]-HDP2 on Ubuntu18
{% endif %}
{% set gp_ver = None %}
{# pxf tarballs passed testing jobs #}
{% set gp_ver = 6 %}
{% if build_deb == True %}
    - get: pxf_gp[[gp_ver]]_tarball_ubuntu18
      passed: [Test PXF-GP[[gp_ver]]-HDP2 on Ubuntu18]
{% endif %}
{% set gp_ver = 5 %}
    - get: pxf_gp[[gp_ver]]_tarball_rhel6
      passed:
      - Test PXF-GP[[gp_ver]]-HDP2 on RHEL6
{% set gp_ver = None %}
{% for gp_ver in range(5, 7) %}
    - get: pxf_gp[[gp_ver]]_tarball_rhel7
      passed: [Test PXF-GP[[gp_ver]]-HDP2 on RHEL7]
{# gpdb packages used in testing jobs #}
{% endfor %}
{% set gp_ver = 5 %}
    - get: gpdb[[gp_ver]]_rhel6_rpm_latest-0
      passed: [Test PXF-GP[[gp_ver]]-HDP2 on RHEL6]
{% set gp_ver = 6 %}
{% if build_deb == True %}
    - get: gpdb[[gp_ver]]_ubuntu18_deb_latest-0
      passed: [Test PXF-GP[[gp_ver]]-HDP2 on Ubuntu18]
{% endif %}
{% set gp_ver = None %}
{% for gp_ver in range(5, 7) %}
    - get: gpdb[[gp_ver]]_rhel7_rpm_latest-0
      passed: [Test PXF-GP[[gp_ver]]-HDP2 on RHEL7]
{% endfor %}
{% if dev_pipeline == True and slack_notification != False %}
  - task: slack-alert
    config:
      platform: linux
      image_resource:
        type: registry-image
        source: { repository: busybox }
      run:
        path: "true"
    <<: *slack_alert
{% endif %}

## ---------- Extended Tests ----------
{% if dev_pipeline != True %}
{% set gp_ver = 6 %}
- name: Test PXF-GP[[gp_ver]]-HDP2-NO-IMPERS on RHEL7
  plan:
  - in_parallel:
    - get: pxf_src
      passed: [Testing Gate for PXF-GP]
      trigger: true
    - get: pxf_tarball
      resource: pxf_gp[[gp_ver]]_tarball_rhel7
      passed: [Testing Gate for PXF-GP]
    - get: gpdb_package
      resource: gpdb[[gp_ver]]_rhel7_rpm_latest-0
      passed: [Testing Gate for PXF-GP]
    - get: gpdb[[gp_ver]]-pxf-dev-centos7-image
    - get: pxf-automation-dependencies
    - get: singlecluster
      resource: singlecluster-hdp2
  - task: Test PXF-GP[[gp_ver]]-HDP2-NO-IMPERS on RHEL7
    file: pxf_src/concourse/tasks/test.yml
    image: gpdb[[gp_ver]]-pxf-dev-centos7-image
    params:
      GP_VER: [[gp_ver]]
      IMPERSONATION: false
      TARGET_OS: centos
      TARGET_OS_VERSION: 7
#      TEST_ENV: ((test-env))

- name: Test PXF-GP[[gp_ver]]-MAPR on RHEL7
  plan:
  - in_parallel:
    - get: pxf_src
      passed: [Testing Gate for PXF-GP]
      trigger: true
    - get: pxf_tarball
      resource: pxf_gp[[gp_ver]]_tarball_rhel7
      passed: [Testing Gate for PXF-GP]
    - get: gpdb_package
      resource: gpdb[[gp_ver]]_rhel7_rpm_latest-0
      passed: [Testing Gate for PXF-GP]
    - get: gpdb[[gp_ver]]-pxf-dev-centos7-mapr-server-image
    - get: pxf-automation-dependencies
  - task: Test PXF-GP[[gp_ver]]-MAPR on RHEL7
    privileged: true
    file: pxf_src/concourse/tasks/test.yml
    image: gpdb[[gp_ver]]-pxf-dev-centos7-mapr-server-image
    params:
      GP_VER: [[gp_ver]]
      GROUP: hcfs,jdbc
      HADOOP_CLIENT: MAPR
      TARGET_OS: centos
      TARGET_OS_VERSION: 7
#      TEST_ENV: ((test-env))

- name: Test PXF-GP[[gp_ver]]-HDP3 on RHEL7
  plan:
  - in_parallel:
    - get: pxf_src
      passed: [Testing Gate for PXF-GP]
      trigger: true
    - get: pxf_tarball
      resource: pxf_gp[[gp_ver]]_tarball_rhel7
      passed: [Testing Gate for PXF-GP]
    - get: gpdb_package
      resource: gpdb[[gp_ver]]_rhel7_rpm_latest-0
      passed: [Testing Gate for PXF-GP]
    - get: gpdb[[gp_ver]]-pxf-dev-centos7-image
    - get: pxf-automation-dependencies
    - get: singlecluster
      resource: singlecluster-hdp3
  - task: Test PXF-GP[[gp_ver]]-HDP3 on RHEL7
    file: pxf_src/concourse/tasks/test.yml
    image: gpdb[[gp_ver]]-pxf-dev-centos7-image
    params:
      ACCESS_KEY_ID: ((tf-machine-access-key-id))
      GP_VER: [[gp_ver]]
      GROUP: gpdb,proxy,profile
      SECRET_ACCESS_KEY: ((tf-machine-secret-access-key))
      TARGET_OS: centos
      TARGET_OS_VERSION: 7
#      TEST_ENV: ((test-env))

- name: Test PXF-GP[[gp_ver]]-HDP3-SECURE AMBARI (MANUAL) on RHEL7
  plan:
  - in_parallel:
    - get: pxf_src
      passed: [Testing Gate for PXF-GP]
#      trigger: true
    - get: pxf_tarball
      resource: pxf_gp[[gp_ver]]_tarball_rhel7
      passed: [Testing Gate for PXF-GP]
    - get: gpdb_package
      resource: gpdb[[gp_ver]]_rhel7_rpm_latest-0
      passed: [Testing Gate for PXF-GP]
    - get: gpdb[[gp_ver]]-pxf-dev-centos7-image
    - get: ccp-7-image
    - get: pxf-automation-dependencies
    - get: singlecluster
      resource: singlecluster-hdp3
  - task: load_config_for_ambari
    file: pxf_src/concourse/tasks/load_ambari_config.yml
    image: ccp-7-image
    params:
      GOOGLE_CREDENTIALS: ((google-service-account-key))
      GOOGLE_PROJECT_ID: ((google-project-id))
      GOOGLE_ZONE: ((google-zone))
  - task: Test PXF-GP[[gp_ver]]-HDP3-SECURE AMBARI (MANUAL) on RHEL7
    file: pxf_src/concourse/tasks/test.yml
    image: gpdb[[gp_ver]]-pxf-dev-centos7-image
    params:
      ACCESS_KEY_ID: ((tf-machine-access-key-id))
      GP_VER: [[gp_ver]]
      GROUP: security
      HADOOP_CLIENT: HDP_KERBEROS
      SECRET_ACCESS_KEY: ((tf-machine-secret-access-key))
      TARGET_OS: centos
#      TEST_ENV: ((test-env))

- name: Test PXF-GP[[gp_ver]]-HDP2-JDK11 on RHEL7
  plan:
  - in_parallel:
    - get: pxf_src
      passed: [Testing Gate for PXF-GP]
      trigger: true
    - get: pxf_tarball
      resource: pxf_gp[[gp_ver]]_tarball_rhel7
      passed: [Testing Gate for PXF-GP]
    - get: gpdb_package
      resource: gpdb[[gp_ver]]_rhel7_rpm_latest-0
      passed: [Testing Gate for PXF-GP]
    - get: gpdb[[gp_ver]]-pxf-dev-centos7-image
    - get: pxf-automation-dependencies
    - get: singlecluster
      resource: singlecluster-hdp2
  - task: Test PXF-GP[[gp_ver]]-HDP2-JDK11 on RHEL7
    file: pxf_src/concourse/tasks/test.yml
    image: gpdb[[gp_ver]]-pxf-dev-centos7-image
    params:
      ACCESS_KEY_ID: ((tf-machine-access-key-id))
      GP_VER: [[gp_ver]]
      GROUP: cloud-access-and-hdfs,hbase,hcfs,jdbc,profile,pushdown
      RUN_JDK_VERSION: 11
      SECRET_ACCESS_KEY: ((tf-machine-secret-access-key))
      TARGET_OS: centos
      TARGET_OS_VERSION: 7
#      TEST_ENV: ((test-env))

- name: Test PXF-GP[[gp_ver]]-CDH on RHEL7
  plan:
  - in_parallel:
    - get: pxf_src
      passed: [Testing Gate for PXF-GP]
      trigger: true
    - get: pxf_tarball
      resource: pxf_gp[[gp_ver]]_tarball_rhel7
      passed: [Testing Gate for PXF-GP]
    - get: gpdb_package
      resource: gpdb[[gp_ver]]_rhel7_rpm_latest-0
      passed: [Testing Gate for PXF-GP]
    - get: gpdb[[gp_ver]]-pxf-dev-centos7-image
    - get: pxf-automation-dependencies
    - get: singlecluster
      resource: singlecluster-cdh
  - task: Test PXF-GP[[gp_ver]]-CDH on RHEL7
    file: pxf_src/concourse/tasks/test.yml
    image: gpdb[[gp_ver]]-pxf-dev-centos7-image
    # CDH often fails on HBASE permission grant
    attempts: 3
    params:
      ACCESS_KEY_ID: ((tf-machine-access-key-id))
      GP_VER: [[gp_ver]]
      GROUP: gpdb,proxy,profile
      HADOOP_CLIENT: CDH
      SECRET_ACCESS_KEY: ((tf-machine-secret-access-key))
      TARGET_OS: centos
      TARGET_OS_VERSION: 7
#      TEST_ENV: ((test-env))

## ---------- HCFS Cloud tests ----------

- name: Test PXF-GP[[gp_ver]]-S3 on RHEL7
  plan:
  - in_parallel:
    - get: pxf_src
      passed: [Testing Gate for PXF-GP]
      trigger: true
    - get: pxf_tarball
      resource: pxf_gp[[gp_ver]]_tarball_rhel7
      passed: [Testing Gate for PXF-GP]
    - get: gpdb_package
      resource: gpdb[[gp_ver]]_rhel7_rpm_latest-0
      passed: [Testing Gate for PXF-GP]
    - get: gpdb[[gp_ver]]-pxf-dev-centos7-image
    - get: pxf-automation-dependencies
    - get: singlecluster
      resource: singlecluster-hdp2
  - task: Test PXF-GP[[gp_ver]]-S3 on RHEL7
    file: pxf_src/concourse/tasks/test.yml
    image: gpdb[[gp_ver]]-pxf-dev-centos7-image
#    attempts: 2
    params:
      ACCESS_KEY_ID: ((tf-machine-access-key-id))
      GP_VER: [[gp_ver]]
      GROUP: hcfs,s3
      PROTOCOL: s3
      SECRET_ACCESS_KEY: ((tf-machine-secret-access-key))
      TARGET_OS: centos
      TARGET_OS_VERSION: 7
#      TEST_ENV: ((test-env))

- name: Test PXF-GP[[gp_ver]]-S3-NO-IMPERS on RHEL7
  plan:
  - in_parallel:
    - get: pxf_src
      passed: [Testing Gate for PXF-GP]
      trigger: true
    - get: pxf_tarball
      resource: pxf_gp[[gp_ver]]_tarball_rhel7
      passed: [Testing Gate for PXF-GP]
    - get: gpdb_package
      resource: gpdb[[gp_ver]]_rhel7_rpm_latest-0
      passed: [Testing Gate for PXF-GP]
    - get: gpdb[[gp_ver]]-pxf-dev-centos7-image
    - get: pxf-automation-dependencies
    - get: singlecluster
      resource: singlecluster-hdp2
  - task: Test PXF-GP[[gp_ver]]-S3-NO-IMPERS on RHEL7
    file: pxf_src/concourse/tasks/test.yml
    image: gpdb[[gp_ver]]-pxf-dev-centos7-image
#    attempts: 2
    params:
      ACCESS_KEY_ID: ((tf-machine-access-key-id))
      GP_VER: [[gp_ver]]
      GROUP: hcfs,s3
      IMPERSONATION: false
      PROTOCOL: s3
      SECRET_ACCESS_KEY: ((tf-machine-secret-access-key))
      TARGET_OS: centos
      TARGET_OS_VERSION: 7
      #      TEST_ENV: ((test-env))

- name: Test PXF-GP[[gp_ver]]-ADL-NO-IMPERS on RHEL7
  plan:
  - in_parallel:
    - get: pxf_src
      passed: [Testing Gate for PXF-GP]
      trigger: true
    - get: pxf_tarball
      resource: pxf_gp[[gp_ver]]_tarball_rhel7
      passed: [Testing Gate for PXF-GP]
    - get: gpdb_package
      resource: gpdb[[gp_ver]]_rhel7_rpm_latest-0
      passed: [Testing Gate for PXF-GP]
    - get: gpdb[[gp_ver]]-pxf-dev-centos7-image
    - get: pxf-automation-dependencies
    - get: singlecluster
      resource: singlecluster-hdp2
  - task: Test PXF-GP[[gp_ver]]-ADL-NO-IMPERS on RHEL7
    file: pxf_src/concourse/tasks/test.yml
    image: gpdb[[gp_ver]]-pxf-dev-centos7-image
    params:
      ADL_ACCOUNT: ((adl-account))
      ADL_CLIENT_ID: ((adl-client-id))
      ADL_CREDENTIAL: ((adl-credential))
      ADL_REFRESH_URL: ((adl-refresh-url))
      GP_VER: [[gp_ver]]
      GROUP: hcfs
      IMPERSONATION: false
      PROTOCOL: adl
      TARGET_OS: centos
#      TEST_ENV: ((test-env))

- name: Test PXF-GP[[gp_ver]]-GS-NO-IMPERS on RHEL7
  plan:
  - in_parallel:
    - get: pxf_src
      passed: [Testing Gate for PXF-GP]
      trigger: true
    - get: pxf_tarball
      resource: pxf_gp[[gp_ver]]_tarball_rhel7
      passed: [Testing Gate for PXF-GP]
    - get: gpdb_package
      resource: gpdb[[gp_ver]]_rhel7_rpm_latest-0
      passed: [Testing Gate for PXF-GP]
    - get: gpdb[[gp_ver]]-pxf-dev-centos7-image
    - get: pxf-automation-dependencies
    - get: singlecluster
      resource: singlecluster-hdp2
  - task: Test PXF-GP[[gp_ver]]-GS-NO-IMPERS on RHEL7
    file: pxf_src/concourse/tasks/test.yml
    image: gpdb[[gp_ver]]-pxf-dev-centos7-image
    params:
      GOOGLE_CREDENTIALS: ((data-gpdb-ud-google-json-key))
      GP_VER: [[gp_ver]]
      GROUP: hcfs
      IMPERSONATION: false
      PROTOCOL: gs
      TARGET_OS: centos
#      TEST_ENV: ((test-env))

- name: Test PXF-GP[[gp_ver]]-MINIO-NO-IMPERS on RHEL7
  plan:
  - in_parallel:
    - get: pxf_src
      passed: [Testing Gate for PXF-GP]
      trigger: true
    - get: pxf_tarball
      resource: pxf_gp[[gp_ver]]_tarball_rhel7
      passed: [Testing Gate for PXF-GP]
    - get: gpdb_package
      resource: gpdb[[gp_ver]]_rhel7_rpm_latest-0
      passed: [Testing Gate for PXF-GP]
    - get: gpdb[[gp_ver]]-pxf-dev-centos7-image
    - get: pxf-automation-dependencies
    - get: singlecluster
      resource: singlecluster-hdp2
  - task: Test PXF-GP[[gp_ver]]-MINIO-NO-IMPERS on RHEL7
    file: pxf_src/concourse/tasks/test.yml
    image: gpdb[[gp_ver]]-pxf-dev-centos7-image
    params:
      GP_VER: [[gp_ver]]
      GROUP: hcfs
      IMPERSONATION: false
      PROTOCOL: minio
      TARGET_OS: centos
#      TEST_ENV: ((test-env))

## ---------- Multi-node tests ----------

- name: Test PXF-GP[[gp_ver]]-HDP2-SECURE-MULTI-IMPERS on RHEL7
  max_in_flight: 2
  plan:
  - in_parallel:
    - get: pxf_src
      passed: [Testing Gate for PXF-GP]
#      passed: [Build PXF-GP[[gp_ver]] on RHEL7]
      trigger: true
    - get: pxf_tarball
      resource: pxf_gp[[gp_ver]]_tarball_rhel7
      passed: [Testing Gate for PXF-GP]
#      passed: [Build PXF-GP[[gp_ver]] on RHEL7]
    - get: gpdb_package
      resource: gpdb[[gp_ver]]_rhel7_rpm_latest-0
      passed: [Testing Gate for PXF-GP]
#      passed: [Build PXF-GP[[gp_ver]] on RHEL7]
    - get: gpdb[[gp_ver]]-pxf-dev-centos7-image
    - get: ccp_src
    - get: ccp-7-image
    - get: pxf-automation-dependencies
    - get: singlecluster
      resource: singlecluster-hdp2
  - in_parallel:
    - do:
      - put: terraform_gpdb
        resource: terraform
        params:
          action: create
          delete_on_failure: true
          generate_random_name: true
          terraform_source: ccp_src/google/
          vars:
            PLATFORM: centos7
            number_of_nodes: ((number_of_gpdb_nodes))
            extra_nodes: 1
            segments_per_host: 4
            instance_type: n1-standard-4
            ccp_reap_minutes: 120
      - task: Generate Greenplum Cluster
        input_mapping:
          gpdb_rpm: gpdb_package
          terraform: terraform_gpdb
        file: ccp_src/ci/tasks/gen_cluster.yml
        image: ccp-7-image
        params:
          AWS_ACCESS_KEY_ID: ((tf-machine-access-key-id))
          AWS_SECRET_ACCESS_KEY: ((tf-machine-secret-access-key))
          AWS_DEFAULT_REGION: ((aws-region))
          BUCKET_PATH: ((tf-bucket-path))
          BUCKET_NAME: ((tf-bucket-name))
          PLATFORM: centos7
          CLOUD_PROVIDER: google
          GPDB_RPM: true
      - in_parallel:
        - task: Initialize Greenplum
          file: ccp_src/ci/tasks/gpinitsystem.yml
        - task: Install Hadoop
          file: pxf_src/concourse/tasks/install_hadoop.yml
          image: gpdb[[gp_ver]]-pxf-dev-centos7-image
          params:
            ACCESS_KEY_ID: ((tf-machine-access-key-id))
            SECRET_ACCESS_KEY: ((tf-machine-secret-access-key))
            IMPERSONATION: ((enable-impersonation-multinode))
            TARGET_OS: centos
    - task: Generate Hadoop Cluster 1
      file: pxf_src/concourse/tasks/install_dataproc.yml
      image: ccp-7-image
      params:
        GOOGLE_CREDENTIALS: ((google-service-account-key))
        GOOGLE_PROJECT_ID: ((google-project-id))
        GOOGLE_ZONE: ((google-zone))
        IMAGE_VERSION: ((dataproc-image-version))
        KERBEROS: ((kerberos-enabled))
        ccp_reap_minutes: 120
    - task: Generate Hadoop Cluster 2
      file: pxf_src/concourse/tasks/install_dataproc.yml
      image: ccp-7-image
      output_mapping:
        dataproc_env_files: dataproc_2_env_files
      params:
        GOOGLE_CREDENTIALS: ((data-gpdb-ud-kerberos-google-service-account-key))
        GOOGLE_PROJECT_ID: ((data-gpdb-ud-kerberos-google-project-id))
        GOOGLE_ZONE: ((data-gpdb-ud-kerberos-google-zone))
        HADOOP_USER: gpuser
        IMAGE_VERSION: ((dataproc-image-version))
        INITIALIZATION_SCRIPT: gs://data-gpdb-ud-kerberos-scripts/scripts/initialization-for-kerberos.sh
        INSTANCE_TAGS: bosh-network,data-gpdb-ud-access
        KERBEROS: ((kerberos-enabled))
        KEY: dataproc-kerberos-key
        KEYRING: dataproc-kerberos
        ccp_reap_minutes: 120
        NO_ADDRESS: false
        PROXY_USER: gpuser
        SECRETS_BUCKET: data-gpdb-ud-kerberos-pxf-secrets
  - task: Setup PXF
    input_mapping:
      terraform: terraform_gpdb
    file: pxf_src/concourse/tasks/install_pxf_on_ccp.yml
    image: ccp-7-image
    params:
      IMPERSONATION: true
      INSTALL_GPHDFS: false
      GP_VER: [[gp_ver]]
      KERBEROS: ((kerberos-enabled))
      PXF_JVM_OPTS: ((pxf-jvm-opts))
  - task: Test PXF-GP[[gp_ver]]-HDP2-SECURE-MULTI-IMPERS on RHEL7
    on_success:
      <<: *destroy_clusters
    image: gpdb[[gp_ver]]-pxf-dev-centos7-image
    file: pxf_src/concourse/tasks/test_pxf_on_ccp.yml
    attempts: 2
    params:
      ACCESS_KEY_ID: ((tf-machine-access-key-id))
      SECRET_ACCESS_KEY: ((tf-machine-secret-access-key))
      HIVE_VERSION: 2
      IMPERSONATION: true
      KERBEROS: ((kerberos-enabled))
      GOOGLE_PROJECT_ID: ((google-project-id))
      GP_VER: [[gp_ver]]
      GROUP: security,proxySecurity,multiClusterSecurity
      PXF_JVM_OPTS: ((pxf-jvm-opts))
      TARGET_OS: centos

- name: Test PXF-GP[[gp_ver]]-HDP2-SECURE-MULTI-NO-IMPERS on RHEL7
  max_in_flight: 2
  plan:
  - in_parallel:
    - get: pxf_src
      passed: [Testing Gate for PXF-GP]
      trigger: true
    - get: pxf_tarball
      resource: pxf_gp[[gp_ver]]_tarball_rhel7
      passed: [Testing Gate for PXF-GP]
    - get: gpdb_package
      resource: gpdb[[gp_ver]]_rhel7_rpm_latest-0
      passed: [Testing Gate for PXF-GP]
    - get: gpdb[[gp_ver]]-pxf-dev-centos7-image
    - get: ccp_src
    - get: ccp-7-image
    - get: pxf-automation-dependencies
    - get: singlecluster
      resource: singlecluster-hdp2
  - in_parallel:
    - do:
      - put: terraform_gpdb
        resource: terraform
        params:
          action: create
          delete_on_failure: true
          generate_random_name: true
          terraform_source: ccp_src/google/
          vars:
            PLATFORM: centos7
            number_of_nodes: ((number_of_gpdb_nodes))
            extra_nodes: 1
            segments_per_host: 4
            instance_type: n1-standard-4
            ccp_reap_minutes: 120
      - task: Generate Greenplum Cluster
        input_mapping:
          gpdb_rpm: gpdb_package
          terraform: terraform_gpdb
        file: ccp_src/ci/tasks/gen_cluster.yml
        image: ccp-7-image
        params:
          AWS_ACCESS_KEY_ID: ((tf-machine-access-key-id))
          AWS_SECRET_ACCESS_KEY: ((tf-machine-secret-access-key))
          AWS_DEFAULT_REGION: ((aws-region))
          BUCKET_PATH: ((tf-bucket-path))
          BUCKET_NAME: ((tf-bucket-name))
          PLATFORM: centos7
          CLOUD_PROVIDER: google
          GPDB_RPM: true
      - in_parallel:
        - task: Initialize Greenplum
          file: ccp_src/ci/tasks/gpinitsystem.yml
        - task: Install Hadoop
          file: pxf_src/concourse/tasks/install_hadoop.yml
          image: gpdb[[gp_ver]]-pxf-dev-centos7-image
          params:
            ACCESS_KEY_ID: ((tf-machine-access-key-id))
            SECRET_ACCESS_KEY: ((tf-machine-secret-access-key))
            IMPERSONATION: ((enable-impersonation-multinode))
            TARGET_OS: centos
    - task: Generate Hadoop Cluster 1
      file: pxf_src/concourse/tasks/install_dataproc.yml
      image: ccp-7-image
      params:
        GOOGLE_CREDENTIALS: ((google-service-account-key))
        GOOGLE_PROJECT_ID: ((google-project-id))
        GOOGLE_ZONE: ((google-zone))
        IMAGE_VERSION: ((dataproc-image-version))
        KERBEROS: ((kerberos-enabled))
        ccp_reap_minutes: 120
    - task: Generate Hadoop Cluster 2
      file: pxf_src/concourse/tasks/install_dataproc.yml
      image: ccp-7-image
      output_mapping:
        dataproc_env_files: dataproc_2_env_files
      params:
        GOOGLE_CREDENTIALS: ((data-gpdb-ud-kerberos-google-service-account-key))
        GOOGLE_PROJECT_ID: ((data-gpdb-ud-kerberos-google-project-id))
        GOOGLE_ZONE: ((data-gpdb-ud-kerberos-google-zone))
        HADOOP_USER: gpuser
        IMAGE_VERSION: ((dataproc-image-version))
        INITIALIZATION_SCRIPT: gs://data-gpdb-ud-kerberos-scripts/scripts/initialization-for-kerberos.sh
        INSTANCE_TAGS: bosh-network,data-gpdb-ud-access
        KERBEROS: ((kerberos-enabled))
        KEY: dataproc-kerberos-key
        KEYRING: dataproc-kerberos
        ccp_reap_minutes: 120
        NO_ADDRESS: false
        PROXY_USER: gpuser
        SECRETS_BUCKET: data-gpdb-ud-kerberos-pxf-secrets
  - task: Setup PXF
    input_mapping:
      terraform: terraform_gpdb
    file: pxf_src/concourse/tasks/install_pxf_on_ccp.yml
    image: ccp-7-image
    params:
      IMPERSONATION: false
      INSTALL_GPHDFS: false
      GP_VER: [[gp_ver]]
      KERBEROS: ((kerberos-enabled))
      PXF_JVM_OPTS: ((pxf-jvm-opts))
  - task: Test PXF-GP[[gp_ver]]-HDP2-SECURE-MULTI-NO-IMPERS on RHEL7
    on_success:
      <<: *destroy_clusters
    image: gpdb[[gp_ver]]-pxf-dev-centos7-image
    file: pxf_src/concourse/tasks/test_pxf_on_ccp.yml
    attempts: 2
    params:
      ACCESS_KEY_ID: ((tf-machine-access-key-id))
      SECRET_ACCESS_KEY: ((tf-machine-secret-access-key))
      HIVE_VERSION: 2
      IMPERSONATION: false
      KERBEROS: ((kerberos-enabled))
      GOOGLE_PROJECT_ID: ((google-project-id))
      GP_VER: [[gp_ver]]
      GROUP: security,multiClusterSecurity
      PXF_JVM_OPTS: ((pxf-jvm-opts))
      TARGET_OS: centos

## ---------- Compatibility Gate ----------
- name: Compatibility Gate for PXF-GP
  plan:
  - in_parallel:
{# pxf source passed all testing jobs #}
    - get: pxf_src
      passed:
      - Test PXF-GP[[gp_ver]]-HDP2-NO-IMPERS on RHEL7
      - Test PXF-GP[[gp_ver]]-MAPR on RHEL7
      - Test PXF-GP[[gp_ver]]-HDP3 on RHEL7
#      - Test PXF-GP[[gp_ver]]-HDP3-SECURE AMBARI (MANUAL) on RHEL7
      - Test PXF-GP[[gp_ver]]-HDP2-JDK11 on RHEL7
      - Test PXF-GP[[gp_ver]]-CDH on RHEL7
      - Test PXF-GP[[gp_ver]]-S3 on RHEL7
      - Test PXF-GP[[gp_ver]]-S3-NO-IMPERS on RHEL7
      - Test PXF-GP[[gp_ver]]-ADL-NO-IMPERS on RHEL7
      - Test PXF-GP[[gp_ver]]-GS-NO-IMPERS on RHEL7
      - Test PXF-GP[[gp_ver]]-MINIO-NO-IMPERS on RHEL7
      - Test PXF-GP[[gp_ver]]-HDP2-SECURE-MULTI-IMPERS on RHEL7
      - Test PXF-GP[[gp_ver]]-HDP2-SECURE-MULTI-NO-IMPERS on RHEL7
      trigger: true
{# pxf tarballs passed testing jobs #}
{% set gp_ver = 5 %}
    - get: pxf_gp[[gp_ver]]_tarball_rhel6
      passed:
      - Testing Gate for PXF-GP
    - get: pxf_gp[[gp_ver]]_tarball_rhel7
      passed:
      - Testing Gate for PXF-GP
{% set gp_ver = 6 %}
{% if build_deb == True %}
    - get: pxf_gp[[gp_ver]]_tarball_ubuntu18
      passed:
      - Testing Gate for PXF-GP
{% endif %}
    - get: pxf_gp[[gp_ver]]_tarball_rhel7
      passed:
      - Test PXF-GP[[gp_ver]]-HDP2-NO-IMPERS on RHEL7
      - Test PXF-GP[[gp_ver]]-MAPR on RHEL7
      - Test PXF-GP[[gp_ver]]-HDP3 on RHEL7
      # - Test PXF-GP[[gp_ver]]-HDP3-SECURE AMBARI (MANUAL) on RHEL7
      - Test PXF-GP[[gp_ver]]-HDP2-JDK11 on RHEL7
      - Test PXF-GP[[gp_ver]]-CDH on RHEL7
      - Test PXF-GP[[gp_ver]]-S3 on RHEL7
      - Test PXF-GP[[gp_ver]]-S3-NO-IMPERS on RHEL7
      - Test PXF-GP[[gp_ver]]-ADL-NO-IMPERS on RHEL7
      - Test PXF-GP[[gp_ver]]-GS-NO-IMPERS on RHEL7
      - Test PXF-GP[[gp_ver]]-MINIO-NO-IMPERS on RHEL7
      - Test PXF-GP[[gp_ver]]-HDP2-SECURE-MULTI-IMPERS on RHEL7
      - Test PXF-GP[[gp_ver]]-HDP2-SECURE-MULTI-NO-IMPERS on RHEL7

## ---------- Compatibility Testing ----------
{% set gp_ver = 5 %}
- name: Test PXF-GP[[gp_ver]] Backward Compatibility on RHEL6
  plan:
  - in_parallel:
    - get: pxf_src
      passed: [Compatibility Gate for PXF-GP]
      # for faster iteration run BC right after build:
      # passed: [Build PXF-GP[[gp_ver]] on RHEL6]
      trigger: true
    - get: pxf_tarball
      resource: pxf_gp[[gp_ver]]_tarball_rhel6
      passed: [Compatibility Gate for PXF-GP]
      # for faster iteration run BC right after build:
      # passed: [Build PXF-GP[[gp_ver]] on RHEL6]
    - get: gpdb[[gp_ver]]-pxf-dev-centos6-image
    - get: singlecluster
      resource: singlecluster-hdp2
{% for i in range(1, num_gpdb5_versions) %}
    - get: gpdb_package_latest-[[i]]
      resource: gpdb[[gp_ver]]_rhel6_rpm_latest-[[i]]
{% endfor %}
  - in_parallel:
      limit: [[max_concurrent_bc_tasks]]
      fail_fast: false
      steps:
{% for i in range(1, num_gpdb5_versions) %}
      - task: Test Against Greenplum Latest - [[i]] RHEL6
        image: gpdb[[gp_ver]]-pxf-dev-centos6-image
        config:
          platform: linux
          inputs:
          - name: gpdb_package_latest-[[i]]
          - name: pxf_src
          - name: pxf_tarball
          - name: singlecluster
          params:
            GPDB_PKG_DIR: gpdb_package_latest-[[i]]
            GROUP: HdfsSmokeTest,WritableSmokeTest
            HADOOP_CLIENT: hdp
            IMPERSONATION: true
            PGPORT: 5432
            PG_REGRESS: true
            GP_VER: [[gp_ver]]
          run:
            path: pxf_src/concourse/scripts/test.bash
{% endfor %}

{% for gp_ver in range(5, 7) %}
{% set num_versions = num_gpdb5_versions %}
{% if gp_ver == 6 %}
  {% set num_versions = num_gpdb6_versions %}
{% endif %}
- name: Test PXF-GP[[gp_ver]] Backward Compatibility on RHEL7
  plan:
  - in_parallel:
    - get: pxf_src
      passed: [Compatibility Gate for PXF-GP]
      # for faster iteration run BC right after build:
      # passed: [Build PXF-GP[[gp_ver]] on RHEL7]
      trigger: true
    - get: pxf_tarball
      passed: [Compatibility Gate for PXF-GP]
      # for faster iteration run BC right after build:
      # passed: [Build PXF-GP[[gp_ver]] on RHEL7]
      resource: pxf_gp[[gp_ver]]_tarball_rhel7
    - get: gpdb[[gp_ver]]-pxf-dev-centos7-image
    - get: singlecluster
      resource: singlecluster-hdp2
{% for i in range(1, num_versions) %}
    - get: gpdb_package_latest-[[i]]
      resource: gpdb[[gp_ver]]_rhel7_rpm_latest-[[i]]
{% endfor %}
  - in_parallel:
      limit: [[max_concurrent_bc_tasks]]
      fail_fast: false
      steps:
{% for i in range(1, num_versions) %}
      - task: Test Against Greenplum Latest - [[i]] RHEL7
        image: gpdb[[gp_ver]]-pxf-dev-centos7-image
        config:
          platform: linux
          inputs:
          - name: gpdb_package_latest-[[i]]
          - name: pxf_src
          - name: pxf_tarball
          - name: singlecluster
          params:
            GPDB_PKG_DIR: gpdb_package_latest-[[i]]
            GROUP: HdfsSmokeTest,WritableSmokeTest
            HADOOP_CLIENT: hdp
            IMPERSONATION: true
            PGPORT: 5432
            PG_REGRESS: true
            GP_VER: [[gp_ver]]
          run:
            path: pxf_src/concourse/scripts/test.bash
{% endfor %}
{% set num_versions = None %}
{% endfor %} {# both gp5 and gp6 #}

{% if build_deb == True %}
{% set gp_ver = 6 %}
- name: Test PXF-GP[[gp_ver]] Backward Compatibility on Ubuntu18
  plan:
  - in_parallel:
    - get: pxf_src
      passed: [Compatibility Gate for PXF-GP]
      # for faster iteration run BC right after build:
      # passed: [Build PXF-GP[[gp_ver]] on Ubuntu18]
      trigger: true
    - get: pxf_tarball
      passed: [Compatibility Gate for PXF-GP]
      # for faster iteration run BC right after build:
      # passed: [Build PXF-GP[[gp_ver]] on Ubuntu18]
      resource: pxf_gp[[gp_ver]]_tarball_ubuntu18
    - get: gpdb[[gp_ver]]-pxf-dev-ubuntu18-image
    - get: singlecluster
      resource: singlecluster-hdp2
{% for i in range(1, num_gpdb6_versions) %}
    - get: gpdb_package_latest-[[i]]
      resource: gpdb[[gp_ver]]_ubuntu18_deb_latest-[[i]]
{% endfor %}
  - in_parallel:
      limit: [[max_concurrent_bc_tasks]]
      fail_fast: false
      steps:
{% for i in range(1, num_gpdb6_versions) %}
      - task: Test Against Greenplum Latest - [[i]] Ubuntu18
        image: gpdb[[gp_ver]]-pxf-dev-ubuntu18-image
        config:
          platform: linux
          inputs:
          - name: gpdb_package_latest-[[i]]
          - name: pxf_src
          - name: pxf_tarball
          - name: singlecluster
          params:
            GPDB_PKG_DIR: gpdb_package_latest-[[i]]
            GROUP: HdfsSmokeTest,WritableSmokeTest
            HADOOP_CLIENT: hdp
            IMPERSONATION: true
            PGPORT: 5432
            PG_REGRESS: true
            GP_VER: [[gp_ver]]
          run:
            path: pxf_src/concourse/scripts/test.bash
{% endfor %}
{% set gp_ver = None %}
{% endif %}

## ---------- Artifact Promotion Gate ----------
- name: Promote PXF-GP5 and PXF-GP6 Artifacts
  plan:
  - in_parallel:
    # pxf source passed all testing jobs
    - get: pxf_src
      passed:
{% set gp_ver = 5 %}
      - Test PXF-GP[[gp_ver]] Backward Compatibility on RHEL6
      # - Build PXF-GP[[gp_ver]] on RHEL6
{% for gp_ver in range(5, 7) %}
      - Test PXF-GP[[gp_ver]] Backward Compatibility on RHEL7
      # - Build PXF-GP[[gp_ver]] on RHEL7
{% endfor %}
{% set gp_ver = None %}
{% if build_deb == True %}
{% set gp_ver = 6 %}
      - Test PXF-GP[[gp_ver]] Backward Compatibility on Ubuntu18
      # - Build PXF-GP[[gp_ver]] on Ubuntu18
{% set gp_ver = None %}
{% endif %}
{# pxf tarballs passed testing jobs #}
{% set gp_ver = 5 %}
    - get: pxf_gp[[gp_ver]]_tarball_rhel6
      trigger: true
      passed:
      - Test PXF-GP[[gp_ver]] Backward Compatibility on RHEL6
      # - Build PXF-GP[[gp_ver]] on RHEL6
{% for gp_ver in range(5, 7) %}
    - get: pxf_gp[[gp_ver]]_tarball_rhel7
      trigger: true
      passed:
      - Test PXF-GP[[gp_ver]] Backward Compatibility on RHEL7
      # - Build PXF-GP[[gp_ver]] on RHEL7
{% endfor %}
{% set gp_ver = None %}
{% if build_deb == True %}
{% set gp_ver = 6 %}
    - get: pxf_gp[[gp_ver]]_tarball_ubuntu18
      trigger: true
      passed:
      - Test PXF-GP[[gp_ver]] Backward Compatibility on Ubuntu18
      # - Build PXF-GP[[gp_ver]] on Ubuntu18
{% set gp_ver = None %}
{% endif %}
    - get: google-cloud-sdk-slim-image
  - task: Promote PXF-GP5 and PXF-GP6 Artifacts
    image: google-cloud-sdk-slim-image
    file: pxf_src/concourse/tasks/promote_pxf_artifacts.yml
    params:
      GCS_RELEASES_BUCKET: data-gpdb-ud-pxf-releases
      GCS_RELEASES_PATH: prod/releases
      GIT_BRANCH: [[git_branch]]
      GIT_EMAIL: ((pxf-git-deploy-email))
      GIT_REMOTE_URL: ((pxf-git-remote-ssh-url))
      GIT_SSH_KEY: ((pxf-git-deploy-key))
      GIT_USERNAME: ((pxf-git-deploy-username))
      GOOGLE_CREDENTIALS: ((pxf-storage-service-account-key))
{% if slack_notification != False %}
    <<: *slack_alert
{% endif %}

- name: Publish PXF-GP5 and PXF-GP6 Artifacts to GP-RelEng
  plan:
  - in_parallel:
    # pxf source passed all testing jobs
    - get: pxf_src
      passed:
      - Promote PXF-GP5 and PXF-GP6 Artifacts
    - get: pxf_open_source_license_file
      trigger: true
    - get: google-cloud-sdk-slim-image
  - task: Publish PXF-GP5 and PXF-GP6 Artifacts to GP-RelEng
    image: google-cloud-sdk-slim-image
    file: pxf_src/concourse/tasks/publish_release_to_releng.yml
    params:
      GCS_OSL_PATH: prod/OSL
      GCS_RELEASES_BUCKET: data-gpdb-ud-pxf-releases
      GCS_RELEASES_PATH: prod/releases
      GOOGLE_CREDENTIALS: ((pxf-storage-service-account-key))
      RELENG_RELEASES_BUCKET: data-gpdb-ud-pxf-releases
      RELENG_RELEASES_PATH: practice/releases
{% if slack_notification != False %}
    <<: *slack_alert
{% endif %}
{% endif %} {# if dev_pipeline == True #}
{% endif %} {# if pr_pipeline == True #}
